// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyAPI.Models;

#nullable disable

namespace MyAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231130063913_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyAPI.Models.CartModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("MyAPI.Models.FoodModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("MyAPI.Models.OrderDetailsModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("MyAPI.Models.OrderModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Surcharge")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MyAPI.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("https://t4.ftcdn.net/jpg/02/23/50/73/360_F_223507349_F5RFU3kL6eMt5LijOaMbWLeHUTv165CB.jpg");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MyAPI.Models.CartModel", b =>
                {
                    b.HasOne("MyAPI.Models.UserModel", "UserModel")
                        .WithMany("Carts")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyAPI.Models.FoodModel", "FoodModel")
                        .WithOne("CartModel")
                        .HasForeignKey("MyAPI.Models.CartModel", "FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FoodModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("MyAPI.Models.OrderDetailsModel", b =>
                {
                    b.HasOne("MyAPI.Models.FoodModel", "FoodModel")
                        .WithOne("OrderDetailsModel")
                        .HasForeignKey("MyAPI.Models.OrderDetailsModel", "FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyAPI.Models.OrderModel", "OrderModel")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FoodModel");

                    b.Navigation("OrderModel");
                });

            modelBuilder.Entity("MyAPI.Models.OrderModel", b =>
                {
                    b.HasOne("MyAPI.Models.UserModel", "UserModel")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("MyAPI.Models.FoodModel", b =>
                {
                    b.Navigation("CartModel");

                    b.Navigation("OrderDetailsModel");
                });

            modelBuilder.Entity("MyAPI.Models.OrderModel", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MyAPI.Models.UserModel", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
